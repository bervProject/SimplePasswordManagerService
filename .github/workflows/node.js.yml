# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI
on:
    push:
        branches: [master]
        tags:
          - v*
    pull_request:
        branches: [master]
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: spms
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  HEROKU_APP_NAME: spms-berv
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        ports:
          - 5432:5432
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: spms
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://npm.pkg.github.com/
          always-auth: true
      - run: yarn
      - run: yarn test
        env:
          NODE_ENV: github
      - run: bash <(curl -s https://codecov.io/bash)
  docker-push:
    # Ensure test job passes before pushing image.
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --build-arg NODE_AUTH_TOKEN=${NODE_AUTH_TOKEN}
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - uses: akhileshns/heroku-deploy@v3.10.9 # This is the action
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "" #Must be unique in Heroku
          heroku_email: "bervianto.leo@gmail.com"
          justlogin: true
      - name: Heroku Container Login & Update
        run: |
          heroku update
          heroku container:login
      - name: Push image & Release
        run: |
          HEROKU_IMAGE=registry.heroku.com/$HEROKU_APP_NAME/web
          docker tag $IMAGE_NAME $HEROKU_IMAGE
          docker push $HEROKU_IMAGE
          heroku container:release web --app=${HEROKU_APP_NAME}
