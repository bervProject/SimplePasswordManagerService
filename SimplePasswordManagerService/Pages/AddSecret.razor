@page "/add-secret"
@using Microsoft.Extensions.Logging
@using SimplePasswordManagerService.Business.Models;
@using SimplePasswordManagerService.Business.Repositories;
@using System.Security.Claims;
@inject ILogger<AddSecret> Logger
@inject NavigationManager Navigation
@inject ICredentialRepo CredentialRepo
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Add Secret</PageTitle>

<h1>Add Secret</h1>

<EditForm Model="@credentialsRequest" OnValidSubmit="@HandleSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            Email:
            <InputText id="email" @bind-Value="credentialsRequest.Email" />
        </label>
    </p>
    <p>
        <label>
            Description (optional):
            <InputTextArea id="description" @bind-Value="credentialsRequest.Description" />
        </label>
    </p>
    <p>
        <label>
            Site URL:
            <InputText id="siteUrl" @bind-Value="credentialsRequest.SiteUrl" />
        </label>
    </p>
    <p>
        <label>
            Password:
            <InputText type="password" id="password" @bind-Value="credentialsRequest.Password" />
        </label>
    </p>

    <button type="submit">Submit</button>
</EditForm>

@code {
    private CredentialsRequest credentialsRequest = new();

    private async Task HandleSubmitAsync()
    {
        Logger.LogInformation("HandleSubmit called");

        // Process the form
        var authState = await AuthenticationStateProvider
              .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }
            CredentialRepo.CreateCredentials(credentialsRequest, userId);
            Navigation.NavigateTo("secrets");
        }
        
    }
}
