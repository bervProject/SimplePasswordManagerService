@page "/secrets"
@using SimplePasswordManagerService.Business.Models;
@using SimplePasswordManagerService.Business.Repositories;
@using System.Security.Claims;
@inject ICredentialRepo CredentialRepo
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Secret List</PageTitle>

<h1>Secret List</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (credentials == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Created Date Time</th>
                <th>Description</th>
                <th>Site URL</th>
                <th>Password</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cred in credentials)
            {
                <tr>
                    <td>@cred.Email</td>
                    <td>@cred.CreateDateTime</td>
                    <td>@cred.Description</td>
                    <td>@cred.SiteUrl</td>
                    <td>@cred.DecryptedPassword</td>
                    <td>
                        <button class="btn btn-info" @onclick="@(e => ShowHidePasswordAsync(e, cred.Id))">
                            @if (string.IsNullOrEmpty(@cred.DecryptedPassword))
                            {
                                <span>Show Password</span>
                            }
                            else
                            {
                                <span>Hide Password</span>
                            }
                        </button>
                        <button class="btn btn-danger" @onclick="@(e => DeleteCredAsync(e, cred.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Credentials>? credentials;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
              .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }
            credentials = CredentialRepo.GetCredentials(userId);
        }
    }

    private async Task DeleteCredAsync(MouseEventArgs e, Guid id)
    {
        var authState = await AuthenticationStateProvider
              .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }
            var cred = credentials?.Find(x => x.CreatedBy == userId && x.Id == id);
            if (cred == null)
            {
                return;
            }
            CredentialRepo.DeleteCredentials(userId, id);
            credentials?.Remove(cred);
        }
    }

    private async Task ShowHidePasswordAsync(MouseEventArgs e, Guid id)
    {
        var authState = await AuthenticationStateProvider
              .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }
            var cred = credentials?.Find(x => x.CreatedBy == userId && x.Id == id);
            if (cred == null)
            {
                return;
            }
            if (string.IsNullOrEmpty(cred.DecryptedPassword))
            {
                var existing = CredentialRepo.GetCredentialsById(id, userId, true);
                cred.DecryptedPassword = existing?.Password;
            }
            else
            {
                cred.DecryptedPassword = null;
            }
        }
    }
}
